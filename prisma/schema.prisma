// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student { 
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
    // studentId      String       @unique
  name           String
  email          String?
  gender         String
  phone          Int
  parentName     String
  parentPhone    Int
  field          String
  course          String
  
  
//   profile        Profile?
  enrollments    Enrollment[]
  createdAt      DateTime  @default(now())
}


// model Profile {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   student        Student  @relation(fields: [studentId], references: [id])
//   studentId      String   @db.ObjectId @unique
//   age            Int
//   //   school         String
// //   rollNumber     Int
// //   average        String
//   faculty        String
//   department     String
//   major          String
//   bio            String?
//   updatedAt      DateTime @updatedAt
// }

model Course {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String      @unique
  credits     Int
  instructor  String      // Or you can reference an Instructor model
  description String?

  enrollments Enrollment[]
  semester    String      // e.g., "Fall 2024"
  createdAt   DateTime    @default(now())
}

model Enrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String   @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String   @db.ObjectId
  enrollmentDate DateTime @default(now())
  grade      Float?
}

model Admin {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String   @unique
  password         String
  emailVerified    DateTime?

  accounts      Account[]
  createdAt DateTime @default(now())
}

model Account {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.String
  access_token       String?   @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.String
  session_state      String?

  user Admin @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  token    String @unique
  expires  DateTime

  @@unique([email, token])
}